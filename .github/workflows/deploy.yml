name: Build and Deploy

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            # Navigate to deployment directory
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Pull the latest image
            docker pull ${{ needs.build-and-push.outputs.image-tag }}
            
            # Stop and remove existing containers
            docker-compose down || true
            
            # Update the docker-compose.yml with new image tag
            export APP_IMAGE="${{ needs.build-and-push.outputs.image-tag }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export DB_ROOT_PASSWORD="${{ secrets.DB_ROOT_PASSWORD }}"
            export ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}"
            export CORS_ORIGIN="${{ secrets.CORS_ORIGIN }}"
            
            # Start the services
            docker-compose up -d
            
            # Check if services are running
            docker-compose ps
            
            # Clean up old images
            docker image prune -af --filter "until=24h"
            
            echo "Deployment completed successfully!"

  notify:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            # Add notification logic here (Slack, Discord, email, etc.)
          else
            echo "❌ Deployment failed!"
            # Add failure notification logic here
          fi